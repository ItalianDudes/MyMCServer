//file:noinspection SpellCheckingInspection
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

//Version
final String VERSION_MAJOR = '0' // Big updates, usually flagged as RELEASE
final String VERSION_MINOR = '15' // Feature implementation, various patches
final String VERSION_PATCH = '4' // Small patch
final String VERSION_IDENTIFIER = 'A' // Valid Values: [R]elease, [B]eta, [A]lpha

// Program Info
group = 'it.italiandudes'
version = VERSION_MAJOR+'.'+VERSION_MINOR+'.'+VERSION_PATCH+VERSION_IDENTIFIER

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    compileOnly 'io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly 'commons-codec:commons-codec:1.15'
    compileOnly 'commons-io:commons-io:2.11.0'
    implementation 'it.italiandudes:idl:1.0.5'
    // implementation group: 'org.xerial', name:'sqlite-jdbc', version:'3.40.0.0'

}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

shadowJar {
    manifest {
        attributes "Main-Class" : "it.italiandudes.mymcserver.ExecutablePlugin"
    }
    archiveFileName = getRootDir().getName()+"-"+archiveVersion.get()+".jar"
}
tasks.register('buildPlugin') {
    dependsOn shadowJar
    group = "Build"
    description = "Build and assemble the plugin"
}
tasks.register('buildAndRun', Exec) {
    dependsOn shadowJar
    group = "Execution"
    description = "Run the mainClass from the output jar in classpath with ExecTask"
    commandLine "java", "-jar", jar.archiveFile.get()
    standardInput = System.in
}
tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        //noinspection GroovyAccessibility, GroovyAssignabilityCheck
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
}
